// /std_bhm/test/atomic_lim/equilibrium/finite_temperature/local
// /partition_func.cpp

// -----------------------------------------------------------------------

// This program serves as a unit test of the functions defined in the 
// .cpp file 'std_bhm/test/bhm_2hs_2pi/konstantinov_and_perel
// /hopping_quench/finite_temperature/start_in_atomic_lim/block_by_block
// /hfb/main_alg_params.cpp'.

// -----------------------------------------------------------------------


/* Include standard libraries */
#include <iostream>

/* Non-standard third-party libraries */

/* Include user-defined header files */
#include "bhm_2hs_2pi/konstantinov_and_perel/hopping_quench/finite_temperature/\
start_in_atomic_lim/block_by_block/hfb/main_alg_params.h"
#include "atomic_lim/local/params.h"
#include "hopping/spatial_params.h"
#include "hopping/quench/linear/quench_params.h"
#include "bhm_2hs_2pi/konstantinov_and_perel/hopping_quench/finite_temperature/\
start_in_atomic_lim/block_by_block/hfb/step_params.h"



namespace NSA1 = std_bhm::bhm_2hs_2pi::konstantinov_and_perel;
namespace NSA2 = NSA1::hopping_quench::finite_temperature::start_in_atomic_lim;
namespace NSA3 = NSA2::block_by_block::hfb;

int main(int argc, char** argv)
{
    const auto main_params = ::NSA3::main_alg_params();

    const auto& l_params = main_params.get_local_params();
    const auto& sp_params = main_params.get_spatial_params();
    const auto& q_params = main_params.get_quench_params();
    const auto& ds_and_Ns = main_params.get_step_params();
    const auto tol = main_params.get_convergence_tolerance();
    
    std::cout << "mu = " << l_params.get_mu() << std::endl;
    std::cout << "beta = " << l_params.get_beta() << std::endl;
    std::cout << "max_band_index = " << l_params.get_max_band_index()
	      << std::endl;
    std::cout << "L = " << sp_params.get_L() << std::endl;
    std::cout << "d = " << sp_params.get_d() << std::endl;
    std::cout << "ji = " << q_params.get_ji() << std::endl;
    std::cout << "jf = " << q_params.get_jf() << std::endl;
    std::cout << "tc = " << q_params.get_tc() << std::endl;
    std::cout << "tau_Q = " << q_params.get_tau_Q() << std::endl;
    std::cout << "ds = " << ds_and_Ns.get_ds() << std::endl;
    std::cout << "Ns = " << ds_and_Ns.get_Ns() << std::endl;
    std::cout << "tol = " << tol << std::endl;
    
    return 0;
}

