// std_bhm/src/n_k/load_n_k_data_array.cpp

// -----------------------------------------------------------------------

// Insert summary of file

// -----------------------------------------------------------------------

/* Include standard libraries */
#include <vector>
#include <string>
#include <fstream>
#include <sstream>

/* Non-standard third-party libraries */

/* Include user-defined header files */
#include "n_k/load_n_k_data_array.h"
#include "hopping/spatial_params.h"


// The 'unnamed' namespace is introduced to make it clear to the reader
// of this code which functions belong to this translation unit's true 
// unnamed namespace.
namespace NSA1 = std_bhm::hopping;

using dbl_vec = std::vector<double>;
using dbl_vec_2d = std::vector<dbl_vec>;
using int_vec = std::vector<int>;

namespace unnamed
{
namespace
{

const NSA1::spatial_params get_spatial_params
                               (const std::string& abs_sys_data_set_dir_name);

void load_n_k_data_array_inner_loop(int depth,
			      int_vec& k_ints, 
			      int max,
			      const int L,
			      dbl_vec_2d& n_k_arrays,
			      const std::string& abs_sys_data_set_dir_name);

void load_n_k_data_array_from_file(const int_vec& k_ints,
			     dbl_vec_2d& n_k_arrays,
			     const std::string& abs_sys_data_set_dir_name);

} // end of true unnamed namespace
} // end of 'phony' unnamed namespace




// Load quasi-momentum distribution (i.e. n_k) data file for a given sequence
// of k-integers
namespace NSA2 = std_bhm::n_k::load_n_k_data_array_detail;

using dbl_vec = std::vector<double>;
using dbl_vec_2d = std::vector<dbl_vec>;

void load_n_k_data_array_from_file(const int_vec& k_ints,
			     dbl_vec_2d& n_k_arrays,
			     const std::string& abs_sys_data_set_dir_name)
{
    auto abs_filename = abs_sys_data_set_dir_name + "/n_k data/k-vector";
    for(const auto& k_int : k_ints)
	abs_filename += " " + std::to_string(k_int);
    abs_filename += ".txt";

    std::ifstream n_k_ifstream( abs_filename.c_str() );

    auto n_k_array = dbl_vec();
    auto line = std::string();
    std::getline(n_k_ifstream, line); // skip first line: no data
    while( getline(n_k_ifstream, line) )
    {
	std::istringstream ss(line);
	auto time = double();
	auto n_k_value = double();
	ss >> time;
	ss >> n_k_value;
	n_k_array.push_back(n_k_value);
    }

    n_k_arrays.push_back(n_k_array);
}




// Read-off spatial parameters (i.e. L and d) from the given directory name.
namespace NSA1 = std_bhm::hopping;

namespace unnamed
{
namespace
{

const NSA1::spatial_params get_spatial_params
                               (const std::string& abs_sys_data_set_dir_name)
{
    const auto index_1 = abs_sys_data_set_dir_name.find_last_of("/\\");
    
    const auto index_2 = abs_sys_data_set_dir_name.find("d_", index_1);
    const auto index_3 = abs_sys_data_set_dir_name.find(" ", index_2);
    const auto d_str = abs_sys_data_set_dir_name.substr(index_2 + 2,
							index_3 - index_2 - 2);
    const auto d = std::stoi(d_str);

    const auto index_4 = abs_sys_data_set_dir_name.find("L_", index_1);
    const auto index_5 = abs_sys_data_set_dir_name.find(" ", index_4);
    const auto L_str = abs_sys_data_set_dir_name.substr(index_4 + 2,
							index_5 - index_4 - 2);
    const auto L = std::stoi(L_str);

    return ::NSA1::spatial_params(L, d);
}

} // end of true unnamed namespace
} // end of 'phony' unnamed namespace



// A recursive for-loop to load the n_k data from each data file.

namespace unnamed
{
namespace
{

void load_n_k_data_array_inner_loop(int depth,
			      int_vec& k_ints, 
			      int max,
			      const int L,
			      dbl_vec_2d& n_k_arrays,
			      const std::string& abs_sys_data_set_dir_name)
{
    if(depth > 0)
    {
	for(int i=0; i<=max; i++)
	{
	    int d = k_ints.size();
	    k_ints[d-depth] = i;
	    unnamed::load_n_k_data_array_inner_loop(depth-1, k_ints,
					      i, L, n_k_arrays,
					      abs_sys_data_set_dir_name);
	}
    }
    else
    {
	unnamed::load_n_k_data_array_from_file(k_ints, n_k_arrays, 
					 abs_sys_data_set_dir_name);
    }
}

} // end of true unnamed namespace
} // end of 'phony' unnamed namespace



// Load n_k data from data file based on the k-vector integers 'k_ints' and
// store data in a data_array.

namespace unnamed
{
namespace
{

void load_n_k_data_array_from_file(const int_vec& k_ints,
			     dbl_vec_2d& n_k_arrays,
			     const std::string& abs_sys_data_set_dir_name)
{
    auto abs_filename = abs_sys_data_set_dir_name + "/n_k data/k-vector";
    for(const auto& k_int : k_ints)
	abs_filename += " " + std::to_string(k_int);
    abs_filename += ".txt";

    std::ifstream n_k_ifstream( abs_filename.c_str() );

    auto n_k_array = dbl_vec();
    auto line = std::string();
    std::getline(n_k_ifstream, line); // skip first line: no data
    while( getline(n_k_ifstream, line) )
    {
	std::istringstream ss(line);
	auto time = double();
	auto n_k_value = double();
	ss >> time;
	ss >> n_k_value;
	n_k_array.push_back(n_k_value);
    }

    n_k_arrays.push_back(n_k_array);
}

} // end of true unnamed namespace
} // end of 'phony' unnamed namespace
