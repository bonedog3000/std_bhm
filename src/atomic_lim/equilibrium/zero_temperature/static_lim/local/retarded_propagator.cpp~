// std_bhm/src/atomic_lim/equilibrium/zero_temperature/static_lim.cpp

// -----------------------------------------------------------------------

// Insert summary of file

// -----------------------------------------------------------------------

/* Include standard libraries */

/* Non-standard third-party libraries */

/* Include user-defined header files */
#include "atomic_lim/equilibrium/zero_temperature/static_lim.h"
#include "atomic_lim/equilibrium/zero_temperature/energy.h"
#include "atomic_lim/equilibrium/zero_temperature/filling_number.h"



// Calculate the static limit of the retarded Green's function at zero
// temperature for a system with chemical potential 'mu'.
namespace NSA1 = std_bhm::atomic_lim::equilibrium::zero_temperature;

double NSA1::G0_R12_w0(double mu)
{
    const auto E0_p = ::NSA1::local_single_particle_excitation_energy(mu);
    const auto E0_h = ::NSA1::local_single_hole_excitation_energy(mu);
    return -(1 + mu) / E0_p / E0_h;
}



// Calculate u1 at zero temperature for a system with chemical potential 'mu'.
namespace NSA2 = std_bhm::atomic_lim::equilibrium::zero_temperature;

double NSA2::u1(double mu)
{
    const auto n = ::NSA2::filling_number(mu);
    const auto nP1 = n + 1;
    const auto nP2 = n + 2;
    const auto nM1 = n - 1;

    const auto E0_p = ::NSA2::local_single_particle_excitation_energy(mu);
    const auto E0_h = ::NSA2::local_single_hole_excitation_energy(mu);
    const auto E0_2p = ::NSA2::local_n_particle_excitation_energy(2, mu);
    const auto E0_2h = ::NSA2::local_n_hole_excitation_energy(2, mu);

    const auto G0_R12_w0 = ::NSA2::G0_R12_w0(mu);

    return ( -2 / G0_R12_w0 / G0_R12_w0 / G0_R12_w0 / G0_R12_w0
	     * (nP1 * nP2 / E0_2p / E0_p / E0_p
		+ n * nM1 / E0_2h / E0_h / E0_h
		- nP1 * nP1 / E0_p / E0_p / E0_p
		- n * n / E0_h / E0_h / E0_h
		- n * nP1 / E0_p / E0_h / E0_h
		- n * nP1 / E0_p / E0_p / E0_h) );
}
