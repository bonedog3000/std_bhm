// /std_bhm/src/lanczos/full_orthogonalization.h

// -----------------------------------------------------------------------

// Insert summary of file

// -----------------------------------------------------------------------


/* Include standard libraries */
#include <complex>
#include <limits>
#include <cmath>

/* Non-standard third-party libraries */
#include <armadillo>

/* Include user-defined header files */
#include "lanczos/full_orthogonalization.h"



//
namespace NSA1 = std_bhm::lanczos;

void NSA1::full_orthogonalization(const arma::sp_cx_mat& A, arma::sp_mat& T,
		       arma::sp_cx_mat& Q, const arma::cx_dvec& w_0,
		       const ::NSA1::full_orthogonalization_params& la_params)
{
    const auto d_K = la_params.get_krylov_dimension();
    T.set_size(d_K, d_K);
    Q.set_size( arma::size(A) );

    auto q = arma::cx_dvec( w_0 / norm(w_0) );
    Q.col(0) = q;
    auto r = arma::cx_dvec(A * q);
    const auto alpha_0 = double{ std::real( arma::cdot(q, r) ) };
    T(0, 0) = alpha_0;
    r -= alpha_0 * q;
    
    const auto beta_0 = double{ arma::norm(r) };
    auto beta_jM1 = beta_0;

    auto count = 1;
    for(auto j=decltype(d_K){1}; j<d_K; j++)
    {
	const auto v = arma::cx_dvec(q);
	
	// const auto tol = la_params.get_zero_tolerance();
	const auto epsilon = std::numeric_limits<double>::epsilon();
	const auto tol = pow(epsilon, 1.0/3.0);
	if (beta_jM1 < tol)
	{
	    std::cout << "Broke early: j=" << j << std::endl;
	    T.resize(count, count);
	    break;
	    beta_jM1 = 0.0;
	    q = arma::cx_dvec(v.n_rows, arma::fill::randu);
	    q -= Q * (Q.t() * q);
	    q = arma::normalise(q);
	}
	else
	{
	    q = r / beta_jM1;
	}

	Q.col(j) = q;
	T(j-1, j) = beta_jM1;
	T(j, j-1) = beta_jM1;

	r = A * q - beta_jM1 * v;
	const auto alpha_j = double{ std::real( arma::cdot(q, r) ) };
	T(j, j) = alpha_j;
	r -= alpha_j * q;
	r -= Q * (Q.t() * r); // Full reorthogonalization
	r -= Q * (Q.t() * r); // Do it twice to ensure orthogonality

	const auto beta_j = double{ arma::norm(r) };
	beta_jM1 = beta_j;
	count += 1;
    }
}
